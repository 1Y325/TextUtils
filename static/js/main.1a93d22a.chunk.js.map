{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","console","log","split","alert","word","lower","charAt","slice","capatilize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.1a93d22a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={ `navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          {/* console.log(object) */}\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n                    title: PropTypes.string,\r\n                    aboutText: PropTypes.string \r\n  }\r\n//   Navbar.propTypes = {\r\n//     title: PropTypes.string,\r\n//     aboutText: PropTypes.string \r\n// }\r\n","\r\nimport React, {useState} from 'react'\r\n \r\nexport default function TextForm(props){\r\n    \r\n    // }\r\n    // const handleLoClick = ()=>{\r\n    //     console.log(\"Lowercase was Clicked\" + text);\r\n    //     let newText = text.toLowerCase();\r\n    //     setText(newText);\r\n    //     props.showAlert(\"Coverted to LowerCase\",\"success\")\r\n    // }\r\n    // const Clear = ()=>{\r\n    //     console.log(\"Clear Text\" + text);\r\n    //     let newText = \"\"\r\n    //     setText(newText);\r\n    //     props.showAlert(\"Text Clear\",\"success\")\r\n\r\n    // }\r\n    // const handleOnChange = (event)=>{\r\n    //     console.log(\"On Change\");\r\n    //     setText(event.target.value);\r\n    // }\r\n    //  const [text , setText] = useState('');\r\n    //  setText(\"yash\");\r\n\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" +  text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n    const Clear = ()=>{\r\n        console.log(\"Clear Text\" + text);\r\n        let newText = \"\"\r\n        setText(newText);\r\n        props.showAlert(\"Text Clear\",\"success\")\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value) \r\n    }\r\n    const [text , setText] = useState('');\r\n\r\n  return (\r\n      <>\r\n     <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            {/* <h1>{props.heading}</h1> */}\r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            {/* <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea> */}\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button> */}\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button> */}\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={Clear}>Clear Text</button> */}\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button> */}\r\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button> */}\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={Clear}>Clear Text</button>\r\n            {/* <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button> */}\r\n            {/* <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button> */}\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            {/* <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p> */}\r\n            {/* <p>{0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p> */}\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            {/* <p>{text.length>0?text:\"Nothing to preview!\"}</p> */}\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\nfunction alert(props) {\r\n    const capatilize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capatilize(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default alert\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import About from './components/About';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type)=>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Dark Mode';\r\n      // setInterval(() => {\r\n      //   document.title = 'TextUtils is Amazing Mode';\r\n      // }, 2000);\r\n      // setInterval(() => {\r\n      //   document.title = 'Install TextUtils Now';\r\n      // }, 1500);\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      document.title = 'TextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n   \r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    <TextForm  showAlert={showAlert} heading=\"Enter the Text to Analyze Below\" mode={mode}/>\r\n   \r\n    </div>\r\n    \r\n    </> \r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}